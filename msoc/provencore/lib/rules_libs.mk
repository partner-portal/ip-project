#
# Copyright (c) 2016-2023, ProvenRun and/or its affiliates. All rights reserved.
#

# Must be set by caller (defaults defined in common_libs.mk):
# BUILD_BASE, default $(BASE_DIR)/build/$(VARIANT)
# LIB_SRC_DIR, default $(BUILD_BASE)/lib/src/$(LIBNAME)
# LIB_BUILD_DIR, default $(BUILD_BASE)/lib/build/$(LIBNAME)

LIB_DIR := $(BUILD_BASE)/lib
INCLUDE_DIR := $(BUILD_BASE)/include
LIB_DEP_DIR := $(BUILD_BASE)/dep/lib
LIB_DEP_FILE := $(LIB_DIR)/.$(LIBNAME).dep

all: do_build

config: do_config

$(LIB_DEP_FILE):
	@echo "  DEPEND  $(LIBNAME)" $(ECHO_OUTPUT)
	$(Q)truncate -s 0 $@
	$(Q)for i in $(COMMON_LIBS) $(LIB_DEPENDENCIES); do \
	    echo $$i >> $@; \
	done

define BUILD_LIBRARY

LIB_DEPENDENCIES += $($(1)_LIBS)

$(1)_LIB := $(LIB_DIR)/lib$(1).a
$(1)_OBJ_DIR := $(LIB_BUILD_DIR)/build/obj/$(1)
$(1)_LIB_DEP := $(LIB_DEP_DIR)/lib$(1).dep

ifneq ($($(1)_CRATE)$($(1)_SOURCES),)

$(1)_C_OBJS := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %.c,%.o,$(filter %.c,$($(1)_SOURCES))))
$(1)_C_DEPS := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %.c,%.d,$(filter %.c,$($(1)_SOURCES))))
$(1)_CXX_OBJS := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %.cpp,%.o,$(filter %.cpp,$($(1)_SOURCES))))
$(1)_CXX_DEPS := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %.cpp,%.d,$(filter %.cpp,$($(1)_SOURCES))))
$(1)_AS_OBJS := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %.S,%.o,$(filter %.S,$($(1)_SOURCES))))
$(1)_AS_DEPS := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %.S,%.d,$(filter %.S,$($(1)_SOURCES))))
$(1)_RUST_LIB := $(addprefix $$($(1)_OBJ_DIR)/, \
    $(patsubst %,lib%.a,$($(1)_CRATE)))
$(1)_OBJS := $$($(1)_C_OBJS) $$($(1)_AS_OBJS) \
    $(addprefix $$($(1)_OBJ_DIR)/, $($(1)_CUSTOM_OBJS))

$(1)_OBJS += $$($(1)_CXX_OBJS)
$(1)_DEPS := $$($(1)_C_DEPS) $$($(1)_AS_DEPS)
$(1)_DEPS += $$($(1)_CXX_DEPS)

ifeq ($(PROVENCORE_LLVM_BUILD),1)
$$(if $$($(1)_CXX_OBJS),$$(error C++ build not supported with LLVM))
endif
ifneq ($(PNC_LIBC),newlib)
$$(if $$($(1)_CXX_OBJS),$$(error C++ build only supported with newlib))
endif

-include $$($(1)_DEPS)

ifeq ($($(1)_CFLAGS),)
$(1)_CFLAGS = $(CFLAGS)
endif

ifeq ($($(1)_ASFLAGS),)
$(1)_ASFLAGS = $(ASFLAGS)
endif

ifeq ($($(1)_CXXFLAGS),)
$(1)_CXXFLAGS = $(CXXFLAGS)
endif

ifeq ($($(1)_CPPFLAGS),)
$(1)_CPPFLAGS = $(CPPFLAGS)
endif

$$($(1)_OBJ_DIR)/%.o: %.c
	@echo "  CC      $$<" $(ECHO_OUTPUT)
	$(Q)mkdir -p $$(dir $$@)
	$(Q)$(CC) $$($(1)_CPPFLAGS) $$($(1)_CFLAGS) -c $$< -o $$@ -MD -MT $$@

$$($(1)_OBJ_DIR)/%.o: %.cpp
	@echo "  CXX     $$<" $(ECHO_OUTPUT)
	$(Q)mkdir -p $$(dir $$@)
	$(Q)$(CXX) $$($(1)_CPPFLAGS) $$($(1)_CXXFLAGS) -c $$< -o $$@ -MD -MT $$@

$$($(1)_OBJ_DIR)/%.o: %.S
	@echo "  AS      $$<" $(ECHO_OUTPUT)
	$(Q)mkdir -p $$(dir $$@)
	$(Q)$(AS) $$($(1)_ASFLAGS) -c $$< -o $$@ -MD -MT $$@

.PHONY: FORCE
$$($(1)_RUST_LIB): FORCE
	@echo "  CARGO   $$($(1)_CRATE)" $(ECHO_OUTPUT)
	$(Q)mkdir -p $$(dir $$@)
	$(Q)CROSS_COMPILE=$(CROSS_TOOLCHAIN) CONFIG_VARIABLES="$(FEATURES)" \
	    CARGO_TARGET_DIR="$(LIB_BUILD_DIR)/cargo-target" \
	    $(CARGO) build $(CARGO_FLAGS) \
	    --out-dir $$(dir $$@)

$$($(1)_LIB): $$($(1)_OBJS) $$($(1)_RUST_LIB)
	@echo "  LIB     $$@" $(ECHO_OUTPUT)
ifneq ($$($(1)_CRATE),)
	$(Q)cp $$($(1)_RUST_LIB) $$@
else
	$(Q)$(AR) rcsD $$@
endif
ifneq ($$($(1)_OBJS),)
	$(Q)$(AR) rsD $$@ $$($(1)_OBJS)
endif
	@echo $(ECHO_OUTPUT)
	@echo "Built $$@ successfully" $(ECHO_OUTPUT)
	@echo $(ECHO_OUTPUT)

$$($(1)_LIB_DEP):
	@echo "  DEPEND  $$@" $(ECHO_OUTPUT)
	$(Q)mkdir -p $$(dir $$@)
	$$(Q)$(BASE_DIR)/scripts/build/dep/compute_graph.py -C $(BUILD_BASE) $(1) > $$@

endif # BUILD_LIBRARY

$(1)_clean:
	$(Q)rm -f $$($(1)_LIB)

do_build : $$($(1)_LIB) $$($(1)_LIB_DEP)

do_config: $(1)_config

do_clean: $(1)_clean

.PHONY: do_config $(1)_config

endef

# Build library
$(eval $(call BUILD_LIBRARY,$(notdir $(LIBNAME))))

# Build all available docs
ifndef DOC_DIR
# Standalone build: doc generated in lib build folder
DOC_BUILD_DIR := $(LIB_BUILD_DIR)/build/doc
else
# Called from main Makefile: doc generated in $(BUILD_BASE)/doc/libraries
DOC_BUILD_DIR := $(DOC_DIR)/libraries/$(LIBNAME)
endif
MAIN_DOC      := $(LIBNAME)

# Doxygen configuration file, can be overriden, and
# is otherwise generated by default
GENERATED_DOXYFILE := $(DOC_BUILD_DIR)/Doxyfile.generated
DOXYFILE ?= $(GENERATED_DOXYFILE)

include $(BASE_DIR)/scripts/build/rules_doc.mk

$(GENERATED_DOXYFILE): $(BASE_DIR)/doc/Doxyfile.libs.template | $(DOC_BUILD_DIR)
	$(Q)cat $< > $@
	$(Q)echo "# Project name" >> $@
	$(Q)echo "PROJECT_NAME = $(LIBNAME)" >> $@
	$(Q)echo "# Output directory" >> $@
	$(Q)echo "OUTPUT_DIRECTORY = $(DOC_BUILD_DIR)/doxygen" >> $@
	$(Q)echo "# Input source files" >> $@
	$(Q)echo "INPUT = $(abspath $($(MAIN_DOC)_DOXYGEN_INPUT))" >> $@

doc: do_doc

.PHONY: do_clean

do_clean:
	@echo "  CLEAN $(LIBNAME)" $(ECHO_OUTPUT)
	$(Q)rm -rf $(LIB_BUILD_DIR)
	$(Q)rm -f  $(LIB_DEP_FILE)

clean: do_clean do_clean_doc

.PHONY: post_release
post_release:
	@true
