#
# Copyright (c) 2016-2023, ProvenRun and/or its affiliates. All rights reserved.
#
# Providing BASE_DIR and BUILD_BASE is mandatory
#

ifndef BASE_DIR
    $(error BASE_DIR has to be set by calling Makefile !)
endif
ifndef BUILD_BASE
    $(error BUILD_BASE has to be set by calling Makefile !)
endif

include $(BASE_DIR)/scripts/build/verbose.mk

TARGET_FILE := $(BUILD_BASE)/kconfig/target.mk
CONFIG_FILE := $(BUILD_BASE)/kconfig/config.mk

# Make sure $(plat)_config has been called.
ifneq ($(words $(wildcard $(TARGET_FILE) $(CONFIG_FILE))),2)
    $(error "No configuration found -- please run make $$(plat)_config first")
endif

include $(TARGET_FILE) $(CONFIG_FILE)

FEATURES := $(kernel_FEATURES)

export KARCH

# Include target compiler default tools and options
COMPILE_ARCH := $(KARCH)
include $(BASE_DIR)/scripts/build/common_target.mk

KERNEL_FEATURES_DEFINES := $(addprefix -DCONFIG_,$(FEATURES))

# We also need a set of features with user features.
# Warning: `FEATURES` is modified by `common_target.mk`, hence why we cannot
#  define `USER_FEATURES` before
USER_FEATURES := $(FEATURES) $(user_FEATURES)
USER_FEATURES_DEFINES := $(addprefix -DCONFIG_,$(USER_FEATURES))

# Source directories
PLAT_SRC := $(BASE_DIR)/plat/$(PLAT)
KCONFIG_SRC := $(BASE_DIR)/kconfig
TOOLS_SRC := $(BASE_DIR)/tools

# Build directories
PLAT_BUILD := $(BUILD_BASE)/plat
KERNEL_BUILD := $(BUILD_BASE)/kernel
KCONFIG_BUILD := $(BUILD_BASE)/kconfig
INCLUDE_BUILD := $(BUILD_BASE)/include
TOOLS_BUILD := $(BUILD_BASE)/tools
LOG_DIR := $(BUILD_BASE)/log

# Source files
USER_PROGS := $(BUILD_BASE)/.user_progs
PLATFORM_H := $(PLAT_SRC)/platform.h
KCONFIG_DTS := $(KCONFIG_BUILD)/kernel_config.dts

# Generated files
SEL_USER_PROGS_FILE := $(BUILD_BASE)/.sel_user_progs
KCONFIG_DTB := $(KCONFIG_BUILD)/kernel_config.dtb
KCONFIG_C := $(KCONFIG_BUILD)/kernel_config.c
KCONFIG_LINKERSCRIPT := $(KCONFIG_BUILD)/kconfig.ld
KCONFIG_LINKERFILE := $(KCONFIG_SRC)/kconfig.ld.S
KCONFIG_BIN := $(KCONFIG_BUILD)/kernel_config.bin

app_headers := \
	$(INCLUDE_BUILD)/sys_procs_pid.h \
	$(INCLUDE_BUILD)/size_config.h \
	$(PLAT_BUILD)/device.h \
	$(PLAT_BUILD)/device.c

platcheck_BINARY  := $(TOOLS_BUILD)/plat-check/plat-check
metadataconfig_BINARY  := $(TOOLS_BUILD)/metadata-config/metadata-config
pncconfig_BINARY  := $(TOOLS_BUILD)/pnc-config/pnc-config
TOOLS := $(pncconfig_BINARY) $(platcheck_BINARY) $(metadataconfig_BINARY)

.PHONY: all bin headers check tools

all: bin headers ;

bin: $(KCONFIG_BIN) ;

headers: $(app_headers) ;

check: config_validity ;

tools: $(TOOLS) ;

$(INCLUDE_BUILD):
	$(Q)mkdir -p $@

$(PLAT_BUILD):
	$(Q)mkdir -p $@

$(LOG_DIR):
	$(Q)mkdir -p $@

$(pncconfig_BINARY):
	$(error Missing precompiled pnc-config tool)

$(platcheck_BINARY):
	$(error Missing precompiled plat-check tool)

$(metadataconfig_BINARY):
	$(error Missing precompiled metadata-config tool)

##
# KCONFIG_DTS is the kernel configuration file $(PLAT)/kernel_config.dts
# KCONFIG_DTB is the devicetree binary compiled from KCONFIG_DTS
# KCONFIG_C   is the configuration source generated by the tool pnc-config
# KCONFIG_BIN is the binary produced by compiling KCONFIG_SRC, and the
#             configuration binary loaded in the TAR archive
##

$(KCONFIG_DTS):
	$(error Missing kernel_config.dts configuration file)

DTC_TOOL ?= dtc
DTC_VERSION := $(shell $(DTC_TOOL) --version | grep -o "[0-9]*\.[0-9]*\.[0-9]*")

IS_DTC_VER_GE = $(shell printf "$1\n$(DTC_VERSION)\n" | sort -CV && echo YES)

ifneq ($(call IS_DTC_VER_GE,1.4.0), YES)
    $(error "$(DTC_TOOL) should be at least version 1.4.0 (it is $(DTC_VERSION))")
endif

# Include paths for .dts file preprocessing
#
# - GENERIC_DTS_CPP_INCLUDES contains config-independent paths
# - DTS_CPP_INCLUDES contains all include paths
#
GENERIC_DTS_CPP_INCLUDES := \
    $(BASE_DIR)/plat \
    $(BASE_DIR)/drivers \
    $(CONFIGS_DIR)

DTS_CPP_INCLUDES := \
    $(PLAT_SRC) \
    $(GENERIC_DTS_CPP_INCLUDES)

DTC_FLAGS := \
    -Wno-obsolete_chosen_interrupt_controller

ifeq ($(call IS_DTC_VER_GE,1.4.5), YES)
DTC_FLAGS += \
    -Wno-simple_bus_bridge \
    -Wno-simple_bus_reg \
    -Wno-pci_bridge \
    -Wno-pci_device_reg \
    -Wno-pci_device_bus_num \
    -Wno-clocks_property \
    -Wno-cooling_device_property \
    -Wno-dmas_property \
    -Wno-hwlocks_property \
    -Wno-interrupts_extended_property \
    -Wno-io_channels_property \
    -Wno-iommus_property \
    -Wno-mboxes_property \
    -Wno-msi_parent_property \
    -Wno-mux_controls_property \
    -Wno-phys_property \
    -Wno-power_domains_property \
    -Wno-pwms_property \
    -Wno-resets_property \
    -Wno-thermal_sensors_property
endif

ifeq ($(DTC_VERSION), 1.4.5)
DTC_FLAGS += -Wno-sound_dais_property
endif

ifeq ($(call IS_DTC_VER_GE,1.4.6), YES)
DTC_FLAGS += \
    -Wno-chosen_node_is_root \
    -Wno-chosen_node_bootargs \
    -Wno-chosen_node_stdout_path \
    -Wno-sound_dai_property
endif

ifeq ($(call IS_DTC_VER_GE,1.5.0), YES)
DTC_FLAGS += \
    -Wno-i2c_bus_bridge \
    -Wno-i2c_bus_reg \
    -Wno-spi_bus_bridge \
    -Wno-spi_bus_reg
endif

ifeq ($(call IS_DTC_VER_GE,1.6.1), YES)
DTC_FLAGS += -Wno-interrupt_provider
endif

$(KCONFIG_DTB): $(KCONFIG_DTS)
	@echo "Compiling kernel_config.dtb for platform $(PLAT)..." $(ECHO_OUTPUT)
	$(Q)cpp -nostdinc $(addprefix -I, $(DTS_CPP_INCLUDES)) \
		-undef -D__DTC__ $(USER_FEATURES_DEFINES) -x assembler-with-cpp \
		-o $(KCONFIG_DTS).pp $(KCONFIG_DTS)
	$(Q)cpp -nostdinc $(addprefix -I, $(DTS_CPP_INCLUDES)) \
		-undef -D__DTC__ $(USER_FEATURES_DEFINES) -x assembler-with-cpp \
		-M -MF $(KCONFIG_DTB).d -MT $@ $(KCONFIG_DTS)
	$(Q)$(DTC_TOOL) $(DTC_FLAGS) -I dts -O dtb $(KCONFIG_DTS).pp -o $(KCONFIG_DTB)

-include $(KCONFIG_DTB).d

EVAL_CFLAGS := $(KERNEL_FEATURES_DEFINES) \
    -I$(BASE_DIR)/plat -I$(BASE_DIR)/plat/$(PLAT) \
    -I$(BASE_DIR)/include/arch/$(KARCH)

ARCH_ARM_COMMON := armv7a armv8
ifneq ($(filter $(KARCH), $(ARCH_ARM_COMMON)),)
    EVAL_CFLAGS += -I$(BASE_DIR)/include/arch/arm-common
endif

$(SEL_USER_PROGS_FILE): FORCE $(KCONFIG_C) ;
$(PLAT_BUILD)/device.c: FORCE $(KCONFIG_C) ;
$(PLAT_BUILD)/device.h: FORCE $(KCONFIG_C) ;

NR_IRQS := $(shell CFLAGS="$(EVAL_CFLAGS)" \
	    $(BASE_DIR)/scripts/build/eval_c_macro.sh NR_IRQ_VECTORS platform.h)

$(KCONFIG_C): $(KCONFIG_DTB) $(USER_PROGS) $(PLATFORM_H) $(pncconfig_BINARY) | $(LOG_DIR) $(PLAT_BUILD)
	@echo "Generating kernel_config.c and device.{c,h} for platform $(PLAT)..." $(ECHO_OUTPUT)
	$(eval PROGS := $(shell cat $(USER_PROGS) 2> /dev/null || echo ""))
	$(Q)$(pncconfig_BINARY) \
	    --input="$(KCONFIG_DTB)" \
	    --elfs="$(PROGS)" \
	    --nr-irqs="$(NR_IRQS)" \
	    kconfig="$@" \
	    elfs="$(SEL_USER_PROGS_FILE)" \
	    device="$(PLAT_BUILD)/device.c" \
	    device-header="$(PLAT_BUILD)/device.h" \
	    > $(LOG_DIR)/pnc-config.log

KCONFIG_CFLAGS := \
	$(PLATFORM_CFLAGS) -ffreestanding -I $(KCONFIG_SRC) -D__PROVENCORE__ \
	-DCONFIG_KARCH_$(shell echo $(KARCH) | tr a-z A-Z) \
	-DCONFIG_KARCH_BITS_$(shell echo $(KARCH_BITS) | tr a-z A-Z) \

include $(BASE_DIR)/scripts/build/core/rules_binary.mk
KCONFIG_ASFLAGS := -DCONFIG_LINKER_ARCH=$(ELFARCH) -DCONFIG_LINKER_FORMAT=$(ELFFORMAT)
$(eval $(call BUILD_LINKER_SCRIPT,$(KCONFIG_LINKERSCRIPT),KCONFIG))

KCONFIG_LDFLAGS := -nostdlib --build-id=none

$(KCONFIG_BIN): $(KCONFIG_C) $(KCONFIG_LINKERSCRIPT)
	@echo "Compiling kernel_config.bin for platform $(PLAT)..." $(ECHO_OUTPUT)
	$(Q)$(CC) $(KCONFIG_CFLAGS) -c $< -o $(KCONFIG_BIN).o
	$(Q)$(LD) $(KCONFIG_LDFLAGS) --script $(KCONFIG_LINKERSCRIPT) $(KCONFIG_BIN).o -o $(KCONFIG_BIN).pre
	$(Q)$(OC) -O binary -j .data $(KCONFIG_BIN).pre $@

$(INCLUDE_BUILD)/sys_procs_pid.h: $(KCONFIG_DTB) | $(INCLUDE_BUILD)
	@echo "Generating static PIDs..." $(ECHO_OUTPUT)
	$(Q)$(TOOLS_SRC)/gen_sys_procs_pid.sh \
		$(KCONFIG_DTB) -o $(INCLUDE_BUILD)

$(INCLUDE_BUILD)/size_config.h: $(KCONFIG_DTB) | $(INCLUDE_BUILD)
	@echo "Generating size config..." $(ECHO_OUTPUT)
	$(Q)$(TOOLS_SRC)/gen_size_config.sh \
		$(KCONFIG_DTB) -o $(INCLUDE_BUILD)

.PHONY: config_validity
config_validity:
	@echo "Checking the validity of kernel_config.dts" $(ECHO_OUTPUT)

clean:
	@echo "  CLEAN KCONFIG" $(ECHO_OUTPUT)
	$(Q)rm -f  $(KCONFIG_DTS).pp
	$(Q)rm -f  $(KCONFIG_DTB).d
	$(Q)rm -f  $(KCONFIG_DTB)
	$(Q)rm -f  $(KCONFIG_C)
	$(Q)rm -f  $(KCONFIG_BIN)
	$(Q)rm -f  $(KCONFIG_BIN).o
	$(Q)rm -f  $(KCONFIG_BIN).pre
	$(Q)rm -f  $(KCONFIG_LINKERSCRIPT)
	$(Q)rm -f  $(KCONFIG_LINKERSCRIPT).d
	$(Q)rm -f  $(app_headers)
	$(Q)rm -f  $(SEL_USER_PROGS_FILE)
	$(Q)rm -rf $(LOG_DIR)
	$(Q)rm -rf $(PLAT_BUILD)

FORCE: ;

.PHONY: clean
